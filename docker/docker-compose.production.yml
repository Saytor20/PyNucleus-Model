version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: pynucleus-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - pynucleus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: pynucleus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - pynucleus-api-1
      - pynucleus-api-2
      - pynucleus-api-3
    restart: unless-stopped
    networks:
      - pynucleus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PyNucleus API Instance 1
  pynucleus-api-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: pynucleus-api-1
    environment:
      - PYTHONPATH=/app/src
      - PYNUCLEUS_API_KEY=${PYNUCLEUS_API_KEY:-production-key}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_ID=1
      - GUNICORN_WORKERS=4
      - GUNICORN_TIMEOUT=300
      - GUNICORN_BIND=0.0.0.0:5000
      - GUNICORN_MAX_REQUESTS=1000
      - GUNICORN_MAX_REQUESTS_JITTER=100
      - FLASK_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../data:/app/data:ro
      - ../logs:/app/logs
      - ../configs:/app/configs:ro
    expose:
      - "5000"
    networks:
      - pynucleus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PyNucleus API Instance 2
  pynucleus-api-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: pynucleus-api-2
    environment:
      - PYTHONPATH=/app/src
      - PYNUCLEUS_API_KEY=${PYNUCLEUS_API_KEY:-production-key}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_ID=2
      - GUNICORN_WORKERS=4
      - GUNICORN_TIMEOUT=300
      - GUNICORN_BIND=0.0.0.0:5000
      - GUNICORN_MAX_REQUESTS=1000
      - GUNICORN_MAX_REQUESTS_JITTER=100
      - FLASK_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../data:/app/data:ro
      - ../logs:/app/logs
      - ../configs:/app/configs:ro
    expose:
      - "5000"
    networks:
      - pynucleus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PyNucleus API Instance 3
  pynucleus-api-3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: pynucleus-api-3
    environment:
      - PYTHONPATH=/app/src
      - PYNUCLEUS_API_KEY=${PYNUCLEUS_API_KEY:-production-key}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_ID=3
      - GUNICORN_WORKERS=4
      - GUNICORN_TIMEOUT=300
      - GUNICORN_BIND=0.0.0.0:5000
      - GUNICORN_MAX_REQUESTS=1000
      - GUNICORN_MAX_REQUESTS_JITTER=100
      - FLASK_ENV=production
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../data:/app/data:ro
      - ../logs:/app/logs
      - ../configs:/app/configs:ro
    expose:
      - "5000"
    networks:
      - pynucleus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Model Service (Shared across instances)
  pynucleus-model:
    build:
      context: .
      dockerfile: Dockerfile.model
    container_name: pynucleus-model
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    expose:
      - "80"
    networks:
      - pynucleus-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Monitoring Service (Optional)
  monitoring:
    build:
      context: ..
      dockerfile: docker/Dockerfile.monitoring
    container_name: pynucleus-monitoring
    environment:
      - MONITOR_INSTANCES=pynucleus-api-1:5000,pynucleus-api-2:5000,pynucleus-api-3:5000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - pynucleus-api-1
      - pynucleus-api-2
      - pynucleus-api-3
    volumes:
      - ../logs:/app/logs
      - monitoring-data:/app/monitoring
    ports:
      - "8080:8080"
    networks:
      - pynucleus-network
    restart: unless-stopped

networks:
  pynucleus-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  redis-data:
    driver: local
  monitoring-data:
    driver: local 