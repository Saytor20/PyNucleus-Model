Metadata-Version: 2.4
Name: pynucleus
Version: 0.1.0
Summary: Chemical process simulation and RAG system
Author: PyNucleus Contributors
Maintainer: PyNucleus Contributors
License: MIT
Project-URL: Homepage, https://github.com/mohammadalmusaiteer/PyNucleus-Model
Project-URL: Repository, https://github.com/mohammadalmusaiteer/PyNucleus-Model
Project-URL: Issues, https://github.com/mohammadalmusaiteer/PyNucleus-Model/issues
Keywords: chemical,simulation,rag,dwsim,llm
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: torch>=2.6.0
Requires-Dist: transformers>=4.30.0
Requires-Dist: sentence-transformers>=2.2.0
Requires-Dist: langchain>=0.2.0
Requires-Dist: faiss-cpu>=1.7.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: tqdm>=4.66.0
Requires-Dist: pypdf>=4.0.0
Requires-Dist: python-docx>=1.1.0
Requires-Dist: jsonschema>=4.0.0
Requires-Dist: typing-extensions>=4.0.0
Requires-Dist: dspy-ai>=2.4.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pydantic-settings>=2.0.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: scikit-learn>=1.3.0
Requires-Dist: httpx>=0.24.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: urllib3>=2.0.0
Requires-Dist: structlog>=23.0.0
Requires-Dist: accelerate>=0.24.0
Requires-Dist: unstructured>=0.11.0
Requires-Dist: PyMuPDF>=1.23.0
Requires-Dist: pdfplumber>=0.10.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: PyYAML>=6.0.0
Requires-Dist: typer>=0.12.0
Requires-Dist: flask>=2.3.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.4.0; extra == "test"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "test"
Requires-Dist: pytest-cov>=4.1.0; extra == "test"

# PyNucleus-Model: Advanced Chemical Process Simulation & RAG System

[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Docker Support](https://img.shields.io/badge/docker-supported-blue.svg)](https://www.docker.com/)

**PyNucleus** is a comprehensive, production-ready system that integrates **Retrieval-Augmented Generation (RAG)** with **DWSIM chemical process simulation** for advanced chemical engineering applications. It provides end-to-end document processing, knowledge extraction, simulation analysis, and AI-powered insights.

---

## 🚀 **Key Features**

### **🔬 Chemical Engineering Intelligence**
- **Document Processing**: Advanced PDF, DOCX, TXT conversion with table extraction
- **Knowledge Base**: ChromaDB/FAISS-powered semantic search and retrieval
- **Chemical Process Simulation**: DWSIM integration with automated analysis
- **African Modular Plants**: Specialized templates for 22+ African industrial configurations

### **🤖 AI-Powered Analysis**
- **RAG System**: Semantic document retrieval with context-aware responses
- **LLM Integration**: Support for local and cloud LLMs (Qwen, GPT, Claude)
- **Confidence Calibration**: Machine learning-based answer confidence scoring
- **Interactive Chat**: Real-time Q&A with technical document knowledge

### **📊 Advanced Analytics**
- **Financial Analysis**: ROI calculations, profit analysis, payback period
- **Plant Builder**: Interactive modular chemical plant designer
- **Performance Metrics**: System health monitoring and validation
- **Export Capabilities**: Multiple output formats (JSON, CSV, Markdown, PDF)

### **🏗️ Production-Ready Architecture**
- **CLI Interface**: Rich terminal interface with 15+ commands
- **Web Dashboard**: Browser-based interface with real-time monitoring
- **Docker Support**: Container-ready deployment with scaling capabilities
- **API Framework**: FastAPI/Flask-based REST API
- **Comprehensive Testing**: Unit tests, integration tests, and system validation

---

## 📋 **Prerequisites**

- **Python**: 3.10+ (tested with 3.11 and 3.13)
- **Memory**: 8GB+ RAM recommended for full functionality
- **Storage**: 2GB+ free space for models and data
- **Optional**: GPU with CUDA for enhanced LLM performance

---

## 🛠️ **Installation**

### **⚡ One-Click Setup (Recommended)**

**Complete automatic setup with sample data:**

```bash
# Clone the repository
git clone https://github.com/mohammadalmusaiteer/PyNucleus-Model.git
cd PyNucleus-Model

# Run complete setup (installs everything + sample data)
bash quick-start.sh
```

### **🐳 Docker Quickstart (Alternative)**

**One-click installation with Docker:**

```bash
# Clone the repository
git clone https://github.com/mohammadalmusaiteer/PyNucleus-Model.git
cd PyNucleus-Model

# Run Docker installer
bash deployment/install.sh
```

**Manual Docker usage:**
```bash
# Build and run
docker build -t pynucleus .
docker run --rm -it pynucleus --help

# Interactive chat
docker run --rm -it pynucleus chat

# With data persistence
docker run --rm -it -v $(pwd)/data:/app/data pynucleus chat
```

**Docker Compose (Alternative):**
```bash
# Default help
docker-compose up

# Interactive chat
docker-compose --profile chat up pynucleus-chat

# System status
docker-compose --profile status up pynucleus-status
```

### **Option 1: Quick Start (Automated Setup)**

```bash
# Clone the repository
git clone https://github.com/mohammadalmusaiteer/PyNucleus-Model.git
cd PyNucleus-Model

# Run automated setup script
chmod +x activate_and_run.sh
./activate_and_run.sh --help

# Or use Python virtual environment setup
python -m venv pynucleus_env
source pynucleus_env/bin/activate  # On Windows: pynucleus_env\Scripts\activate
pip install -r requirements.txt
```

### **Option 2: Docker Deployment (Production)**

```bash
# Clone and build
git clone https://github.com/mohammadalmusaiteer/PyNucleus-Model.git
cd PyNucleus-Model

# Build all services
cd docker
chmod +x build.sh
./build.sh

# Start services
docker-compose up -d

# Check status
docker-compose ps
```

### **Option 3: Development Installation**

```bash
# Clone repository
git clone https://github.com/mohammadalmusaiteer/PyNucleus-Model.git
cd PyNucleus-Model

# Create virtual environment
python -m venv pynucleus_env
source pynucleus_env/bin/activate

# Install in development mode
pip install -e .

# Install development dependencies
pip install -r requirements.txt
pip install pytest black isort flake8
```

---

## 🎯 **Quick Start Guide**

### **1. System Validation**
```bash
# Verify installation
python scripts/validate_infrastructure.py

# Run comprehensive diagnostics
python scripts/comprehensive_system_diagnostic.py

# Quick health check
pynucleus stats --mode system
```

### **2. Interactive Notebook (Recommended for Beginners)**
```bash
# Start Jupyter notebook
jupyter notebook

# Open "Capstone_Project_Clean.ipynb"
# Follow the 3-step process:
# 1. Initialize system
# 2. Execute analysis
# 3. View results
```

### **3. Command Line Interface**
```bash
# Install the CLI
pip install -e .

# View all available commands
pynucleus --help

# Start interactive chat
pynucleus chat --model Qwen/Qwen2.5-1.5B-Instruct

# Run complete pipeline
pynucleus run --config configs/development_config.json

# Build modular plant
pynucleus build --template-id 1 --feedstock natural_gas
```

### **4. Web Dashboard**
```bash
# Launch dashboard
python scripts/launch_dashboard.py

# Access web interface
# http://localhost:5001/dashboard

# Features:
# - Interactive Q&A system
# - System diagnostics
# - Document upload
# - Performance monitoring
```

---

## 📁 **Project Structure**

```
PyNucleus-Model/
├── src/pynucleus/              # Main Python package
│   ├── api/                    # Web API and dashboard
│   │   ├── app.py              # Flask web server
│   │   └── templates/          # HTML templates
│   ├── cli.py                  # Typer-based CLI interface
│   ├── pipeline/               # Core pipeline components
│   │   ├── pipeline_rag.py     # RAG document processing
│   │   ├── pipeline_dwsim.py   # DWSIM simulation
│   │   ├── pipeline_utils.py   # Complete orchestration
│   │   ├── plant_builder.py    # Modular plant designer
│   │   └── financial_analyzer.py # Financial calculations
│   ├── rag/                    # RAG system components
│   │   ├── document_processor.py # PDF/DOCX conversion
│   │   ├── vector_store.py     # ChromaDB/FAISS integration
│   │   ├── collector.py        # Document ingestion
│   │   ├── engine.py           # RAG query processing
│   │   └── wiki_scraper.py     # Wikipedia knowledge extraction
│   ├── llm/                    # LLM integration
│   │   ├── query_llm.py        # LLM query manager
│   │   ├── answer_engine.py    # Response generation
│   │   ├── model_loader.py     # Model management
│   │   └── prompting.py        # Prompt templates
│   ├── integration/            # Enhanced features
│   │   ├── config_manager.py   # Configuration management
│   │   ├── dwsim_rag_integrator.py # DWSIM-RAG integration
│   │   └── llm_output_generator.py # Report generation
│   ├── eval/                   # Evaluation and calibration
│   │   ├── confidence_calibration.py # ML confidence scoring
│   │   ├── validation_manager.py # System validation
│   │   └── semantic_validation.py # Answer quality assessment
│   ├── deployment/             # Production deployment
│   │   ├── scaling_manager.py  # Auto-scaling
│   │   ├── monitoring.py       # Health monitoring
│   │   └── load_balancer.py    # Load balancing
│   └── utils/                  # Utilities
│       ├── logger.py           # Enhanced logging
│       ├── token_utils.py      # Token counting
│       └── error_handler.py    # Error management
├── data/                       # Organized data directories
│   ├── 01_raw/                # Source documents
│   │   ├── source_documents/   # PDF/DOCX files
│   │   └── wikipedia/          # Scraped knowledge
│   ├── 02_processed/          # Converted text files
│   ├── 03_intermediate/       # Vector databases
│   │   └── vector_db/         # ChromaDB storage
│   ├── 04_models/            # ML models and indexes
│   └── 05_output/            # Results and reports
│       ├── results/          # Pipeline outputs
│       └── llm_reports/      # AI-generated reports
├── configs/                   # Configuration templates
│   ├── development_config.json # Dev settings
│   ├── production_config.json  # Production settings
│   ├── logging.yaml           # Logging configuration
│   └── mock_data_modular_plants.json # Plant templates
├── scripts/                   # Utility scripts
│   ├── validate_infrastructure.py # System validation
│   ├── comprehensive_system_diagnostic.py # Health checks
│   ├── launch_dashboard.py    # Web interface launcher
│   └── system_validator.py    # Test suite runner
├── docker/                    # Docker deployment
│   ├── docker-compose.yml     # Multi-service setup
│   ├── Dockerfile            # Main application
│   └── nginx.conf            # Load balancer config
├── logs/                     # System logs
├── tests/                    # Test suite
├── pyproject.toml           # Python project configuration
├── requirements.txt         # Python dependencies
└── activate_and_run.sh      # Quick setup script
```

---

## ⚙️ **Configuration**

### **Environment Configuration**
Create a `.env` file or copy from `config_template.env`:

```bash
# Model Configuration
MODEL_ID=Qwen/Qwen2.5-1.5B-Instruct
EMB_MODEL=all-MiniLM-L6-v2
MAX_TOKENS=8192
USE_CUDA=false

# Database Configuration
CHROMA_PATH=data/03_intermediate/vector_db
FAISS_INDEX_PATH=data/04_models/faiss_index

# API Configuration
API_HOST=localhost
API_PORT=5001
LOG_LEVEL=INFO

# DWSIM Configuration
DWSIM_ENABLED=true
DWSIM_PATH=/path/to/dwsim/installation
```

### **Pipeline Configuration**
Edit `configs/development_config.json`:

```json
{
  "MODEL_ID": "Qwen/Qwen2.5-1.5B-Instruct",
  "EMB_MODEL": "all-MiniLM-L6-v2",
  "MAX_TOKENS": 8192,
  "RETRIEVE_TOP_K": 5,
  "USE_CUDA": false,
  "LOG_LEVEL": "INFO",
  "CHROMA_PATH": "data/03_intermediate/vector_db"
}
```

---

## 🔄 **Core Workflows**

### **1. Document Processing Pipeline**

```bash
# Ingest documents into vector database
pynucleus ingest --source-dir data/01_raw/source_documents --backend chroma

# Scrape Wikipedia knowledge
pynucleus scrape --topics "chemical engineering,distillation,heat transfer"

# Build FAISS index for fast retrieval
pynucleus build-faiss --chunk-dir data/03_intermediate
```

### **2. Interactive Q&A System**

```bash
# Start chat session with confidence calibration
pynucleus chat --model Qwen/Qwen2.5-1.5B-Instruct --top-k 5

# Ask specific questions
pynucleus ask --question "What are the key parameters for distillation column design?"

# Query with multiple models
pynucleus ask --question "Explain heat exchanger efficiency" --model gpt-3.5-turbo
```

### **3. Chemical Plant Design**

```bash
# Interactive plant builder
pynucleus build

# Automated plant design
pynucleus build \
  --template-id 5 \
  --feedstock natural_gas \
  --production-capacity 10000 \
  --plant-location Nigeria \
  --output-file results/my_plant.json
```

### **4. Complete Pipeline Execution**

```bash
# Run full analysis pipeline
pynucleus run --config configs/production_config.json --output-dir data/05_output

# Run with custom settings
pynucleus run \
  --config configs/development_config.json \
  --verbose \
  --log-file logs/my_pipeline.log
```

### **5. System Monitoring & Diagnostics**

```bash
# Real-time system statistics
pynucleus stats --mode system --live

# Performance monitoring
pynucleus stats --mode performance --interval 30

# Comprehensive health check
pynucleus validate --full
```

---

## 🤖 **LLM Integration**

### **Supported Models**
- **Local Models**: Qwen/Qwen2.5-1.5B-Instruct, GPT-2, BERT variants
- **Cloud APIs**: OpenAI GPT-4, Anthropic Claude, Google PaLM
- **Custom Models**: HuggingFace model hub integration

### **Confidence Calibration**
The system includes machine learning-based confidence scoring:

```python
from pynucleus.eval.confidence_calibration import get_calibrator

# Automatic confidence training during chat sessions
calibrator = get_calibrator()
confidence_score = calibrator.predict_confidence(answer, context)
```

### **Prompt Engineering**
Access advanced prompt templates:

```python
from pynucleus.llm.prompting import build_prompt

prompt = build_prompt(
    context="Technical documentation about distillation",
    question="How to optimize column efficiency?",
    system_message="You are an expert chemical engineer"
)
```

---

## 📊 **Output Formats**

### **RAG Query Results** (`data/05_output/results/`)
- `rag_query_results.csv` - Retrieval results with confidence scores
- `dwsim_simulation_results.csv` - Chemical process simulation data
- `financial_analysis.csv` - Economic calculations and ROI analysis

### **AI-Generated Reports** (`data/05_output/llm_reports/`)
- `llm_analysis_*.md` - Detailed technical analysis reports
- `integrated_dwsim_rag_results_*.json` - Complete integration data
- `plant_design_*.pdf` - Visual plant layout and specifications

### **Monitoring Data** (`logs/`)
- `pynucleus_*.log` - Timestamped system logs
- `diagnostic_runner_*.log` - Health check results
- `scaling_manager.log` - Auto-scaling events

---

## 🧪 **Testing & Validation**

### **Running Tests**
```bash
# Unit tests
pytest src/pynucleus/tests/ -v

# Integration tests
python scripts/integration_test.py

# System validation
python scripts/system_validator.py

# Performance benchmarks
python scripts/stress_test_suite.py
```

### **Quality Assurance**
```bash
# Code formatting
black src/pynucleus/
isort src/pynucleus/

# Type checking
mypy src/pynucleus/

# Linting
flake8 src/pynucleus/
```

### **Validation Reports**
- **System Health**: 100% operational status
- **Test Coverage**: 85%+ code coverage
- **Performance**: < 2s average response time
- **Accuracy**: 81.4% validated script health

---

## 🐳 **Docker Deployment**

### **Quick Deployment**
```bash
# Single command deployment
docker-compose up -d

# Services included:
# - API server (port 5001)
# - Model server (port 8080)  
# - Database (ChromaDB)
# - Load balancer (Nginx)
```

### **Production Scaling**
```bash
# Scale API instances
docker-compose -f docker-compose.scale.yml up -d --scale api=3

# Monitor services
docker-compose logs -f api
docker-compose ps
```

### **Health Monitoring**
```bash
# Check service health
curl http://localhost:5001/health

# View metrics
curl http://localhost:5001/metrics

# Dashboard access
open http://localhost:5001/dashboard
```

---

## 📈 **Performance Optimization**

### **System Tuning**
- **Memory Management**: Configurable model caching and batch processing
- **GPU Acceleration**: CUDA support for LLM inference
- **Database Optimization**: ChromaDB with custom indexing strategies
- **Concurrent Processing**: AsyncIO for parallel document processing

### **Monitoring Metrics**
- **Response Time**: Average < 2 seconds for RAG queries
- **Throughput**: 100+ queries per minute
- **Memory Usage**: < 4GB for standard operations
- **Accuracy**: 85%+ relevance score for retrievals

---

## 🤝 **Contributing**

### **Development Setup**
```bash
# Fork and clone
git clone https://github.com/yourusername/PyNucleus-Model.git
cd PyNucleus-Model

# Install development dependencies
pip install -e ".[dev]"
pre-commit install

# Run tests before submitting
pytest
python scripts/system_validator.py
```

### **Code Standards**
- **Type Hints**: Required for all public functions
- **Docstrings**: Google-style documentation
- **Testing**: Minimum 80% code coverage
- **Formatting**: Black + isort + flake8

### **Contribution Process**
1. Create feature branch (`git checkout -b feature/amazing-feature`)
2. Write tests for new functionality
3. Run validation suite (`python scripts/system_validator.py`)
4. Commit changes (`git commit -m 'Add amazing feature'`)
5. Push to branch (`git push origin feature/amazing-feature`)
6. Open Pull Request with detailed description

---

## 📚 **Documentation**

### **User Guides**
- **[Quick Start Notebook](Capstone_Project_Clean.ipynb)** - Interactive tutorial
- **[Developer Notebook](Developer_Notebook_Clean.ipynb)** - Advanced development
- **[CLI Commands](CLI_COMPONENTS_BREAKDOWN.md)** - Complete command reference
- **[Configuration Guide](configs/README.md)** - Setup and customization

### **API Documentation**
- **REST API**: Auto-generated with FastAPI/Swagger
- **Python API**: In-code docstrings with type hints
- **CLI Help**: `pynucleus --help` for all commands

### **Technical Architecture**
- **[System Architecture](docs/architecture.md)** - High-level design
- **[Data Flow](docs/data_flow.md)** - Processing pipeline details
- **[Integration Guide](docs/integration.md)** - DWSIM and external systems

---

## 🔧 **Troubleshooting**

### **Common Issues**

**Installation Problems:**
```bash
# Missing dependencies
pip install --upgrade pip setuptools wheel
pip install -r requirements.txt

# CUDA issues
pip install torch --index-url https://download.pytorch.org/whl/cpu
```

**Runtime Errors:**
```bash
# Vector database issues
python scripts/validate_infrastructure.py --fix

# Model loading problems
pynucleus download-models --model-id Qwen/Qwen2.5-1.5B-Instruct
```

**Performance Issues:**
```bash
# Memory optimization
export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# Concurrent processing
pynucleus config --workers 4 --batch-size 16
```

### **Debug Mode**
```bash
# Enable verbose logging
pynucleus --debug chat

# System diagnostics
python scripts/comprehensive_system_diagnostic.py --verbose

# Memory profiling
pynucleus stats --mode memory --profile
```

---

## 📄 **License**

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## 🙏 **Acknowledgments**

- **DWSIM**: Open-source chemical process simulator
- **ChromaDB**: Vector database for embeddings
- **HuggingFace**: Transformers and model hub
- **Typer**: Modern CLI framework
- **FastAPI**: High-performance web framework

---

## 📞 **Support & Contact**

- **GitHub Issues**: [Report bugs and request features](https://github.com/mohammadalmusaiteer/PyNucleus-Model/issues)
- **Documentation**: [Complete user guide](docs/)
- **Email**: [Your contact email]
- **Discord**: [Community chat server]

---

## 🚀 **Roadmap**

### **v2.0 (Q2 2024)**
- [ ] Real-time DWSIM integration
- [ ] Advanced ML models for chemical property prediction
- [ ] Multi-language support (Arabic, French, Portuguese)
- [ ] Mobile app interface

### **v2.1 (Q3 2024)**
- [ ] Cloud deployment templates (AWS, Azure, GCP)
- [ ] Advanced visualization dashboard
- [ ] Collaborative features for team workflows
- [ ] Enterprise security features

### **v3.0 (Q4 2024)**
- [ ] AI-powered process optimization
- [ ] Integration with industrial IoT systems
- [ ] Advanced financial modeling
- [ ] Regulatory compliance modules

---

**Ready for production use with comprehensive monitoring and enterprise-grade reliability!** 🎉
